import os, os.path, platform
import ctypes
import ctypes.util
from numpy.ctypeslib import ndpointer
import numpy as np
#Find and load the library
_lib = None
if platform.system()=='Darwin':
    _libraryname= 'libdht.dylib'
else:
    _libraryname= 'libdht.so'
_libname = ctypes.util.find_library(_libraryname)
#if _libname:
#    _lib = ctypes.cdll.LoadLibrary(_libname)
if _libname:
    _lib = ctypes.CDLL(_libname)
if _lib is None: #Hack
    p = os.path.join(TEMPLATE_LIBRARY_PATH,_libraryname)
    if os.path.exists(p):
        _lib = ctypes.CDLL(p)
if _lib is None:
        raise IOError(_libraryname+' library not found')


c_compute_dht = _lib.compute_dht

def compute_dht ( size , indata , order , rmax ):
	outdata = np.zeros ( size , dtype = np.double )
	c_compute_dht ( ctypes.c_int ( size ) , ctypes.c_void_p ( indata.ctypes.data ) , ctypes.c_void_p ( outdata.ctypes.data ) , ctypes.c_int ( order ) , ctypes.c_double ( rmax ) )
	return outdata
	
if __name__ == '__main__' :
	inarray = [895.288905316, 810.718191668, 696.290406069, 570.215383338, 399.498622809, 212.41319929, 128.460230838, 43.1929742175, 9.52052399383, 21.372440338, 46.6173684523, 85.8714739316, 116.359307726, 135.897669575, 124.384396317, 104.66272445, 86.2098602185, 52.8424754644, 29.5716880664, 20.3602336404, 18.6253614391, 28.9907805226, 38.760736791, 46.1210980983, 54.1109979088, 53.1091848218, 47.6376528364, 39.2538938911, 30.4300323063, 22.4763288759, 17.8039947025, 17.6671946222, 18.6698095908, 20.839600764, 22.4184594239, 24.9599164999, 23.6886122811, 22.4826237768, 21.6384744861, 19.5017323998, 16.6494725296, 16.9752420177, 16.5940391361, 14.063868004, 12.9920184835, 12.4163532428, 10.6841440869, 10.2789502573, 9.91279328128, 10.5832552196, 11.6199168516, 11.9056029283, 13.9584747289, 13.1351743982, 11.5250750135, 10.6748572979, 8.23126449731, 5.90779452541, 4.72906930012, 4.10243838537, 5.01007080548, 5.77428805505, 8.26378127656, 9.67281356501, 8.86800757861, 10.5679066865, 9.99110185443, 6.77818921286, 5.42629236428, 3.56850495789, 2.82298183269, 2.76307065961, 3.15015094193, 3.402836832, 3.7548153408, 3.66790661503, 3.30415813584, 2.95570449402, 2.2160283904, 1.85154928745, 1.29169467835, 1.1133212071, 1.14595811375, 1.25684990056, 1.69499380454, 2.09114847828, 2.19854678032, 2.35100107853, 2.09841769924, 1.64964800332, 1.225585561, 0.719427727841, 0.455310078078, 0.496670779741, 0.869930198115, 1.75000210636, 2.72061922898, 4.02955425305, 4.95007454261, 5.80667416654]
	inarray = np.asarray ( inarray )
	p = compute_dht ( 100 , inarray , 1 , 35.178562364 )
	result = [0.04586027524031677, 0.03206789201152233, 0.02341003334068839, 0.018708560995476235, 0.015316470715554182, 0.012131650029225107, 0.011813348729093025, 0.009322804024423302, 0.009150541263893024, 0.008359695498108026, 0.008025632242201658, 0.00765644959770969, 0.008375059121983618, 0.007351944157130514, 0.009120007657435255, 0.011750376834164163, 0.013367380201792999, 0.011970265013838242, 0.01234623047994573, 0.00939825615741058, 0.007153243593651083, 0.005335777259042105, 0.004916138322499266, 0.003854832768915254, 0.0038411595587764073, 0.0031045520050280496, 0.0030491005545930203, 0.002584359284572596, 0.0025652498498369473, 0.0021364400959248083, 0.0022187927154606944, 0.0017875397538080309, 0.0018546289586978042, 0.0015740825399150136, 0.001588545825125172, 0.0013376383038331376, 0.0014314300843170221, 0.0011844916213972375, 0.0012663476788568483, 0.0010475114205748877, 0.0010045966288087043, 0.0008015685193060783, 0.0008959212362112405, 0.0006995126201889181, 0.000763828164168116, 0.0006894382166798772, 0.0007767004726870876, 0.0006990321039846096, 0.0008157650631059171, 0.0006785798430890749, 0.0007141421819387196, 0.0006334557306330103, 0.0006517064830616501, 0.0005248203750607224, 0.0005797456116716492, 0.0004766632036172333, 0.0005873713023633123, 0.0006292329624574619, 0.0006369235089282823, 0.0004983300986274738, 0.0006216403851426316, 0.0006165396065576848, 0.0006120103219157839, 0.0005615028142124565, 0.0005559151736436726, 0.00040156945609035705, 0.00042058836578153175, 0.00033939012323839216, 0.0002837570511339794, 0.0002116739288628188, 0.00024268099024566027, 0.0001941284598898886, 0.0002758222946647529, 0.00022521543425127287, 0.00015678295477488272, 0.00014277319658504393, 0.0001492511046063027, 1.9472399680518695e-05, 1.969295443577981e-05, 3.184992428881206e-05, 4.882849341713812e-05, 2.2822998176289036e-05, 0.00010340037921818903, 0.00010759649149500743, 0.00014135592642312568, 0.0001390656478128293, 0.0001416056698095141, 0.00012724296206824897, 0.000164560856305599, 0.0001373972776941637, 0.00015309730744524658, 0.0001370806666090249, 0.00011417012611250953, 8.28293422026446e-05, 7.792672287239577e-05, 6.924597397386093e-05, 7.660929830114672e-05, 4.239321085862248e-05, 2.3001248259102304e-05, 1.2892588710100893e-05]
	
	result = np.asarray ( result )
	
	print np.equal ( p , result )
